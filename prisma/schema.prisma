// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          UserRole  @default(USER)
    phone         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    accounts      Account[]
    sessions      Session[]
    addresses     Address[]
    orders        Order[]
    cartItems     CartItem[]
    reviews       Review[]
    wishlistItems WishlistItem[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  parentId    Int?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Category? @relation("CategoryParent", fields: [parentId], references: [id])
  children Category[] @relation("CategoryParent")
  products Product[]

  @@map("categories")
}

model Product {
    id               Int      @id @default(autoincrement())
    name             String
    slug             String   @unique
    description      String   @db.Text
    shortDescription String?
    categoryId       Int
    brand            String?
    basePrice        Decimal  @db.Decimal(10, 2)
    salePrice        Decimal? @db.Decimal(10, 2)
    costPrice        Decimal? @db.Decimal(10, 2)
    sku              String?  @unique
    weight           Decimal? @db.Decimal(8, 2)
    dimensions       String?
    isActive         Boolean  @default(true)
    featured         Boolean  @default(false)
    metaTitle        String?
    metaDescription  String?  @db.Text
    tags             String?  @db.Text
    averageRating    Decimal? @db.Decimal(3, 2) // Added field
    reviewCount      Int      @default(0) // Added field
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    category      Category         @relation(fields: [categoryId], references: [id])
    images        ProductImage[]
    variants      ProductVariant[]
    cartItems     CartItem[]
    orderItems    OrderItem[]
    reviews       Review[]
    wishlistItems WishlistItem[]

    @@map("products")
}

model ProductImage {
    id        Int      @id @default(autoincrement())
    productId Int
    url       String
    altText   String?
    sortOrder Int      @default(0)
    isPrimary Boolean  @default(false)
    createdAt DateTime @default(now())

    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@map("product_images")
}

model Attribute {
    id          Int           @id @default(autoincrement())
    name        String
    type        AttributeType
    displayName String
    createdAt   DateTime      @default(now())

    options           AttributeOption[]
    variantAttributes VariantAttribute[]

    @@map("attributes")
}

model AttributeOption {
    id           Int      @id @default(autoincrement())
    attributeId  Int
    value        String
    displayValue String
    colorHex     String?
    createdAt    DateTime @default(now())

    attribute         Attribute          @relation(fields: [attributeId], references: [id], onDelete: Cascade)
    variantAttributes VariantAttribute[]

    @@map("attribute_options")
}

model ProductVariant {
    id             Int      @id @default(autoincrement())
    productId      Int
    sku            String   @unique
    price          Decimal  @db.Decimal(10, 2)
    compareAtPrice Decimal? @db.Decimal(10, 2)
    costPrice      Decimal? @db.Decimal(10, 2)
    stockQuantity  Int      @default(0)
    weight         Decimal? @db.Decimal(8, 2)
    isActive       Boolean  @default(true)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    product           Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
    variantAttributes VariantAttribute[]
    cartItems         CartItem[]
    orderItems        OrderItem[]

    @@map("product_variants")
}

model VariantAttribute {
    id                Int @id @default(autoincrement())
    variantId         Int
    attributeId       Int
    attributeOptionId Int

    variant         ProductVariant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
    attribute       Attribute       @relation(fields: [attributeId], references: [id], onDelete: Cascade)
    attributeOption AttributeOption @relation(fields: [attributeOptionId], references: [id], onDelete: Cascade)

    @@unique([variantId, attributeId])
    @@map("variant_attributes")
}

model Address {
    id           Int         @id @default(autoincrement())
    userId       String
    type         AddressType @default(HOME)
    fullName     String
    phone        String
    addressLine1 String
    addressLine2 String?
    city         String
    state        String
    postalCode   String
    country      String      @default("India")
    isDefault    Boolean     @default(false)
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt

    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    orders Order[]

    @@map("addresses")
}

model CartItem {
    id        Int      @id @default(autoincrement())
    userId    String
    productId Int?
    variantId Int?
    quantity  Int      @default(1)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    product Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
    variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

    @@unique([userId, productId, variantId])
    @@map("cart_items")
}

model Order {
    id             Int           @id @default(autoincrement())
    userId         String
    orderNumber    String        @unique
    status         OrderStatus   @default(PENDING)
    paymentStatus  PaymentStatus @default(PENDING)
    paymentMethod  PaymentMethod
    subtotal       Decimal       @db.Decimal(10, 2)
    taxAmount      Decimal       @default(0) @db.Decimal(10, 2)
    shippingAmount Decimal       @default(0) @db.Decimal(10, 2)
    discountAmount Decimal       @default(0) @db.Decimal(10, 2)
    totalAmount    Decimal       @db.Decimal(10, 2)
    currency       String        @default("INR")

    // Shipping Address
    addressId            Int?
    shippingName         String
    shippingPhone        String
    shippingAddressLine1 String
    shippingAddressLine2 String?
    shippingCity         String
    shippingState        String
    shippingPostalCode   String
    shippingCountry      String  @default("India")

    // Delivery Info
    deliveryType          DeliveryType
    estimatedDeliveryDate DateTime?
    trackingNumber        String?

    notes     String?  @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user         User                 @relation(fields: [userId], references: [id])
    address      Address?             @relation(fields: [addressId], references: [id])
    items        OrderItem[]
    transactions PaymentTransaction[]

    @@map("orders")
}

model OrderItem {
    id         Int      @id @default(autoincrement())
    orderId    Int
    productId  Int?
    variantId  Int?
    quantity   Int
    unitPrice  Decimal  @db.Decimal(10, 2)
    totalPrice Decimal  @db.Decimal(10, 2)
    createdAt  DateTime @default(now())

    order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product Product?        @relation(fields: [productId], references: [id])
    variant ProductVariant? @relation(fields: [variantId], references: [id])

    @@map("order_items")
}

model PaymentTransaction {
    id              Int            @id @default(autoincrement())
    orderId         Int
    transactionId   String         @unique
    paymentGateway  PaymentGateway
    amount          Decimal        @db.Decimal(10, 2)
    currency        String         @default("INR")
    status          PaymentStatus  @default(PENDING)
    gatewayResponse Json?
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt

    order Order @relation(fields: [orderId], references: [id])

    @@map("payment_transactions")
}

model Review {
  id         Int      @id @default(autoincrement())
  userId     String
  productId  Int
  rating     Int
  title      String?
  content    String?  @db.Text
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model WishlistItem {
    id        Int      @id @default(autoincrement())
    userId    String
    productId Int
    createdAt DateTime @default(now())

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([userId, productId])
    @@map("wishlist_items")
}

model Coupon {
    id                    Int          @id @default(autoincrement())
    code                  String       @unique
    description           String?      @db.Text
    discountType          DiscountType
    discountValue         Decimal      @db.Decimal(10, 2)
    minimumOrderAmount    Decimal?     @db.Decimal(10, 2)
    maximumDiscountAmount Decimal?     @db.Decimal(10, 2)
    usageLimit            Int?
    usedCount             Int          @default(0)
    startsAt              DateTime
    expiresAt             DateTime
    isActive              Boolean      @default(true)
    createdAt             DateTime     @default(now())
    updatedAt             DateTime     @updatedAt

    @@map("coupons")
}

// Enums
enum UserRole {
    USER
    ADMIN
    MANAGER
}

enum AddressType {
    HOME
    OFFICE
    OTHER
}

enum AttributeType {
    COLOR
    SIZE
    MATERIAL
    WEIGHT
    VOLUME
    OTHER
}

enum OrderStatus {
    PENDING
    CONFIRMED
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    RETURNED
}

enum PaymentStatus {
    PENDING
    PAID
    FAILED
    REFUNDED
}

enum PaymentMethod {
    CREDIT_CARD
    DEBIT_CARD
    UPI
    NET_BANKING
    COD
    DIGITAL_WALLET
}

enum PaymentGateway {
    STRIPE
    RAZORPAY
    PAYPAL
}

enum DeliveryType {
    SAME_DAY
    NEXT_DAY
    SPEEDPOST
    EXPRESS
}

enum DiscountType {
    PERCENTAGE
    FIXED_AMOUNT
}
